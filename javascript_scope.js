// * 실행컨텍스트 *
// 자바스크립트는 해당 코드를 실행시킨다.
// 코드가 실행되면, 전역 컨텍스트가 생성되고, 변수객체화,스코프체인 생성 초기화, this바인딩이 된다.
// 함수는 실행될때마다 함수 컨텍스트가 생성되고, 위와 같다.


// 코드가 실행되면 전역컨텍스트가 생성.
// 코드 문맥을 기준으로 렉시컬 스코프가 생기고, 상위스코프가 결정된다.
// 밑의 코드에서 전역컨텍스트가 생성되면, 전역 스코프에 환경레코드에는 a,b,c, function print 가 있다.
// 만약 print 라는 함수를 실행 시키면, 함수 컨텍스트가 실행되고, 환경레코드에 d, innerPrint , 가 있다.

var a = 1;
const b = 2;
let c = 3;

function print(){
    const d = 4;
    const innerPrint = () =>{
         let e = 5;
         const innerPrint2 = () =>{
             console.log(e); // 6. 해당되는 innerPrint2 스코프에서 e를 찾으려고 하지만 없음 -> outer 참조로 상위스코프인 innerPrint 스코프의 환경레코드에서 e를 검색  -> e = 5;
         }
         console.log(d); // 4. 해당되는 innerPrint 스코프에서 d를 찾으려고 하지만 없음 -> outer 참조로 상위스코프인 print 스코프의 환경레코드에서 d를 검색  -> d = 4;
         innerPrint2();  // 5. 함수 실행 -> 함수 컨텍스트 생성 -> innerPrint2 스코프 환경레코드가 만들어짐
    }
    console.log(a); // 2.해당되는 print 스코프에서 a를 찾으려고하지만 없음 -> outer 참조로 상위스코프인 전역스코프의 환경레코드에서 a를 검색 -> a = 1;
    innerPrint(); //  3.함수 실행 -> 함수 컨텍스트 생성 -> innerPrint 스코프 환경레코드가 만들어짐.
}
print(); // 1. 함수 실행 - > 함수 컨텍스트 생성 -> print 스코프 환경레코드가 만들어짐

// ** 정리 **
// 스코프는 해당되는 식별자를 검색하는 매커니즘이다.
// 식별자를 검색할 때, 먼저 해당 스코프의 환경레코드에서 검색해보고,
// 없으면 상위 스코프의 환경레코드에서 검색해보고, 없으면 상위의 상위 스코프에서 검색한다.
// 마지막으로 전역 스코프에서 까지도 식별자를 검색할 수 없으면 error
// 이렇게 식별자를 검색할때 꼬리에 꼬리를 물어 검색하는것이 마치 체인처럼 되있다해서
// 이것을 스코프 체인이라고한다.

