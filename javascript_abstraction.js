// 프로그래밍에서 추상화란 뭘까?
// 추상화란 복잡한 자료, 모듈, 시스템 등으로부터 핵심적인 개념 또는 기능을 간추려 내는것을 말한다. 라고 정의 되어있다.
// 그렇다면, javascript 에서 추상화를 어떻게 해야할까?
// 추상화라는 말의 정의가 추상적이라는 생각이 들어서 
// 나의 생각대로 추상화를 정리해 보려고 한다.

// 우리가 쓰는 스마트폰으로 예시를 들어보자.
// 스마트폰 속에는 여러 전자 부품이 들어있고, 볼륨을 높이고 줄이고, 전원을 껐다 키고, 또 화면을 터치하고 , 앱을 실행시키는 등 여러 가지 행위를 할수 있다

class Mobile{
    // 이름과 부품들은 property 가 될 수 가 있다.
    constructor(name,parts){
        this.name = name;
        this.parts = parts;
        this.state = 'off';
    } 
    // 휴대폰 전원을 키는 메소드
    on = async () =>{
        const state = await this.load();
        this.state = state;
        return console.log(`${this.name} is ON`);
    }
    // 휴대폰 전원을 끄는 메소드
    off = () =>{
        this.state = 'off';
    }
    // 휴대폰 전원을 켰을때 휴대폰속의 데이터나, 정보들을 로드 시키는 메소드
    load = async () =>{
        // 데이터나 정보들을 로드하는 시간을 나타내기 위해
        return await new Promise((res,rej) =>{
            setTimeout(()=>{
                res('on');
            },2000)
        })
    }
    // 휴대폰을 터치했을때 메소드
    touch = () =>{
        // 휴대폰이 꺼져있다면, touch는 동작하지 않도록 바로 return
        if(this.state === 'off') return;
        console.log('touched');
    }
}

const iPhoneXS = new Mobile('iPhone-XS',{});
const galaxyS22 = new Mobile('galaxyS22',{});

// Mobile 의 전원을 키는 메소드 on 은 load를 실행시키고 나서야 끝이나는데
// 사용자 입장에서 내부적으로 전원을 킬때 load 라는 복잡한 행위를 알 필요가 없다.
// 그저 전원을 키고 끄고가 제일 중요한 행위이기 때문이다.
// 추상화는 어쩌면, 복잡한 여러것들 중에서 정말 중요하게 필요한것만 추출해내는것이 추상화가 아닐까 라는 생각이 든다.
// on 이라는 메소드는 load 라는 메소드를 실행시키고, 또 어떤 내부적인 매커니즘이 추가 될 수 가 있다.
// 이런 복잡한 것들을 모두 실행히켜야 스마트폰이 켜지는데,
// 스마트폰이 켜지는 이런 복잡한 과정을 on 메소드로 간단하고 간략하게 표현하는것이 추상화 라고 생각이든다.

// 스마트폰이 켜지고 꺼지고의 상황만 생각한다면,
// 스마트폰의 전원을 키는 버튼을 누른다 -> 내부적으로 스마트폰이 구동될 매커니즘이 실행된다 ->  마침내 모든것이 완료되면 스마트폰이 켜진다.
// 추상화는 중간의 내부적으로 구동되는 매커니즘을 내부로 감추고, 
// 간단하게 스마트폰 전원 버튼을 누른다 -> 전원이 켜진다. 라고 생각하는 것이다.
// *** 말이 뒤죽박죽이여서 다시 정리를 해야 겠다.

( async () =>{
    await iPhoneXS.on();
    iPhoneXS.touch();
})();

