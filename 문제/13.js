// const input = [
//     '5 5',
//     '#####',
//     '#..B#',
//     '#.#.#',
//     '#RO.#',
//     '#####',
//     ]
    // const input = [
    // '7 7',
    // '#######',
    // '#...RB#',
    // '#.#####',
    // '#.....#',
    // '#####.#',
    // '#O....#',
    // '#######',
    // ]
    // const input = [
    // '7 7',
    // '#######',
    // '#..R#B#',
    // '#.#####',
    // '#.....#',
    // '#####.#',
    // '#O....#',
    // '#######',
    // ]
    // const input = [
    // '10 10',
    // '##########',
    // '#R#...##B#',
    // '#...#.##.#',
    // '#####.##.#',
    // '#......#.#',
    // '#.######.#',
    // '#.#....#.#',
    // '#.#.#.#..#',
    // '#...#.O#.#',
    // '##########',
    // ]
    // const input = [
    //     '3 7',
    //     '#######',
    //     '#R.O.B#',
    //     '#######'
    // ]
    // const input = [
    // '10 10',
    // '##########',
    // '#R#...##B#',
    // '#...#.##.#',
    // '#####.##.#',
    // '#......#.#',
    // '#.######.#',
    // '#.#....#.#',
    // '#.#.##...#',
    // '#O..#....#',
    // '##########',
    // ]
    // const input = [
    // '3 10',
    // '##########',
    // '#.O....RB#',
    // '##########',
    // ]
    // const input = [
    // '7 8',
    // '########',
    // '#...RB##',
    // '#.######',
    // '#......#',
    // '#####.##',
    // '#O....##',
    // '########'
    // ] //ans -1
    // const input = [
    // '10 10',
    // '##########',
    // '#......#.#',
    // '##.#B#...#',
    // '#.......##',
    // '#.#..#R..#',
    // '#.#...#..#',
    // '#.......##',
    // '##......##',
    // '#O..#....#',
    // '##########'
    // ]
    // const input = ['3 6','######','#O.RB#','######'];
    // const input = ['3 8','########','#O...RB#','########'];
    // const input = [
    // '10 10',
    // '##########',
    // '#RB....#.#',
    // '#..#.....#',
    // '#........#',
    // '#.O......#',
    // '#...#....#',
    // '#........#',
    // '#........#',
    // '#.......##',
    // '##########',
    // ] //ans 10
    // const input = ['3 5','#####','#OBR#','#####'] //ans -1
    // const input = ['5 7','#######','#.RB###','#.#.#O#','#.....#','#######']  //ans 4
    // const input = [
    // '11 13',
    // '#############',
    // '#.RB#########',
    // '#.#.........#',
    // '#.#.#######.#',
    // '#.#.#.....#.#',
    // '#.#.#..O#.#.#',
    // '#.#.#####.#.#',
    // '#.#.......#.#',
    // '#.#########.#',
    // '#...........#',
    // '#############'
    // ] //ans -1
    // const input = [
    // '11 13',
    // '#############',
    // '#RB##########',
    // '#.#.........#',
    // '#.#.#######.#',
    // '#.#.#.....#.#',
    // '#.#.#..O#.#.#',
    // '#.#.#####.#.#',
    // '#.#.......#.#',
    // '#.#########.#',
    // '#...........#',
    // '#############',
    // ] //ans 10
    // const input = [
    // '11 13',
    // '#############',
    // '#R###########',
    // '#B#.........#',
    // '#.#.#######.#',
    // '#.#.#.....#.#',
    // '#.#.#..O#.#.#',
    // '#.#.#####.#.#',
    // '#.#.......#.#',
    // '#.#########.#',
    // '#...........#',
    // '#############',
    // ]   //ans -1
    // const input = [
    // '11 13',
    // '#############',
    // '#.RB#########',
    // '#.#.........#',
    // '#.#.#######.#',
    // '#.#.#.....#.#',
    // '#.#.#O..#.#.#',
    // '#.#.#####.#.#',
    // '#.#.......#.#',
    // '#.#########.#',
    // '#...........#',
    // '#############',
    // ] //ans 10
    // const input = [
    // '10 10',
    // '##########',
    // '#.BR.....#',
    // '#.#####..#',
    // '#.#...#..#',
    // '#.#.#.O..#',
    // '#.#.#....#',
    // '#.#....#.#',
    // '#.#..#...#',
    // '#.#......#',
    // '##########',
    // ] //ans 10
    // const input = [
    // '10 10',
    // '##########',
    // '#.BR.....#',
    // '#.#####..#',
    // '#.#...#..#',
    // '#.#.#..O.#',
    // '#.#.#....#',
    // '#.#....#.#',
    // '#.#..#...#',
    // '#.#......#',
    // '##########',
    // ] // ans -1
    // const input = [
    // '8 8',
    // '########',
    // '#.####.#',
    // '#...#B##',
    // '#.##.R.#',
    // '######.#',
    // '##.##O.#',
    // '###.##.#',
    // '########',
    // ] // ans 7;
    // const input = [
    // '7 6',
    // '######',
    // '######',
    // '####.#',
    // '#.R#.#',
    // '#.#.##',
    // '#O.B.#',
    // '######',
    // ] //ans 3
    // const input = [
    // '6 7',
    // '#######',
    // '##.##.#',
    // '#.B.#.#',
    // '#O..R##',
    // '#.#...#',
    // '#######',
    // ] //ans 1;
    // const input = [
    // '4 6',
    // '######',
    // '#..###',
    // '#OBR##',
    // '######',
    // ] // ans2
    // const input = [
    // '10 10',
    // '##########',
    // '#.......O#',
    // '#.#.....B#',
    // '#........#',
    // '#........#',
    // '##.......#',
    // '#....#..R#',
    // '#.##.....#',
    // '#........#',
    // '##########',
    // ] //ans 4
    // const input = [
    // '10 9',
    // '#########',
    // '##.###..#',
    // '#.#R..#.#',
    // '##..##.##',
    // '###..##.#',
    // '#.#....##',
    // '#..B#.#.#',
    // '###O#..##',
    // '##..##..#',
    // '#########',
    // ] // ans 2
//const fs = require('fs');
//const input = fs.readFileSync('/dev/stdin').toString().trim().split('\n');
const [N,M] = input[0].split(' ').map(Number);
const board = Array.from({length:N},(_,i)=>input[i+1].split(''));

const solution = () =>{
    let pos = {ry:null,rx:null,by:null,bx:null};
    let hall ={y:null,x:null};
    const [left,right,up,down] = [0,1,2,3];
    const isValidPos = (y,x) => (y>=0 && x>=0 && y<N && x<M);
    const dy=[0,0,-1,1];
    const dx=[-1,1,0,0];
    for(let y=0; y<N; y++){
        for(let x=0; x<M; x++){
            if(board[y][x] === 'R') pos.ry = y , pos.rx = x;
            else if(board[y][x] ==='B') pos.by = y, pos.bx = x;
            else if(board[y][x] ==='O') hall.y = y , hall.x = x;
        }
    }
    const bfs = (start) =>{
        let queue = [{...start,count:0}];
        let check = Array.from({length:4},()=>Array(2));
        //let isFinish = false;
        let min ;
        while(queue.length){
            // console.log(queue);
            const {ry,rx,by,bx,count} = queue.shift();
           
           
            // if(check.some(array => (array[0] && !array[1]))){
            //     return min;
            // }
            
            if(count >= 10) return -1;
            
            for(let dir=0; dir<4; dir++){
                let marble =[[ry,rx],[by,bx]];
                check[dir].fill(false);
                for(let i=0; i<marble.length; i++){
                    const [cy,cx] = marble[i];
                    let [ny,nx] = [cy+dy[dir],cx+dx[dir]];
                    while(board[ny][nx] !== '#'){
                        if(ny === hall.y && nx ===hall.x){
                           check[dir][i] = true;
                           break;
                        }
                        ny+=dy[dir];
                        nx+=dx[dir];
                    } 
                    
                    marble[i] = [ny-dy[dir],nx-dx[dir]];
                }

                if(check[dir].some(el => el)){
                    if(check[dir][0] && !check[dir][1] ) return count+1;
                    //console.log(check,min);
                    //isFinish = (check[dir][0] && !check[dir][1]) ? true : false; 
                   //console.log(isFinish,min);
                    continue;
                }
                
                if(marble[0][0] === marble[1][0] && marble[0][1] === marble[1][1]){
                if(dir ===left ){
                    rx < bx ? marble[1][1] = marble[1][1] + 1 :
                              marble[0][1] = marble[0][1] +1
                }
                else if(dir === right){
                    rx < bx ? marble[0][1] = marble[0][1] - 1 :
                              marble[1][1] = marble[1][1] - 1
                }
                else if (dir===up){
                    ry < by ? marble[1][0] = marble[1][0] +1 :
                              marble[0][0] = marble[0][0] +1
                }
                else if(dir===down){
                    ry < by ? marble[0][0] = marble[0][0] -1 :
                              marble[1][0] = marble[1][0] -1
                }
              }
                
                if(ry === marble[0][0] && rx ===marble[0][1] && by === marble[1][0] && bx === marble[1][1]){
                   continue;
                }
                queue.push({ry:marble[0][0],rx:marble[0][1],by:marble[1][0],bx:marble[1][1],count:count+1});
            }
        }
        //console.log(check);
       // if(check.some(array => (array[0] && !array[1]))) return min;
        return -1;
    }
    const answer = bfs(pos);
    console.log(answer);
}
solution();