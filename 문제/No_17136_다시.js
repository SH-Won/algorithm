//const input = ['0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0']
// const input = [
//     '0 0 0 0 0 0 0 0 0 0',
// '0 1 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 1 0 0 0 0 0',
// '0 0 0 0 0 1 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ]
// const input = [
//     '0 0 0 0 0 0 0 0 0 0',
// '0 1 1 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 1 1 0 0 0 0',
// '0 0 0 0 1 1 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ]
// const input = [
//     '0 0 0 0 0 0 0 0 0 0',
// '0 1 1 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 1 1 0 0 0 0',
// '0 0 0 0 0 1 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ]
// const input = [
// '0 0 0 0 0 0 0 0 0 0',
// '0 1 1 0 0 0 0 0 0 0',
// '0 1 1 1 0 0 0 0 0 0',
// '0 0 1 1 1 1 1 0 0 0',
// '0 0 0 1 1 1 1 0 0 0',
// '0 0 0 0 1 1 1 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ]
// const input =[
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1'
// ]
// const input = [
// '0 0 0 0 0 0 0 0 0 0',
// '0 1 1 1 1 1 0 0 0 0',
// '0 1 1 1 1 1 0 0 0 0',
// '0 0 1 1 1 1 0 0 0 0',
// '0 0 1 1 1 1 0 0 0 0',
// '0 1 1 1 1 1 1 1 1 1',
// '0 1 1 1 0 1 1 1 1 1',
// '0 1 1 1 0 1 1 1 1 1',
// '0 0 0 0 0 1 1 1 1 1',
// '0 0 0 0 0 1 1 1 1 1',
// ]
// const input = [
// '0 0 0 0 0 0 0 0 0 0',
// '1 1 1 1 1 0 0 0 0 0',
// '1 1 1 1 1 0 1 1 1 1',
// '1 1 1 1 1 0 1 1 1 1',
// '1 1 1 1 1 0 1 1 1 1',
// '1 1 1 1 1 0 1 1 1 1',
// '0 0 0 0 0 0 0 0 0 0',
// '0 1 1 1 0 1 1 0 0 0',
// '0 1 1 1 0 1 1 0 0 0',
// '0 1 1 1 0 0 0 0 0 1',
// ]
// const input = [
// '1 1 1 1 1 0 0 0 0 0',
// '0 0 0 0 0 1 1 0 1 1',
// '1 1 0 1 1 1 1 0 1 1',
// '1 1 0 1 1 0 0 1 1 1',
// '1 1 1 0 0 0 0 1 1 1',
// '1 1 1 1 1 1 0 1 1 1',
// '1 1 1 1 1 1 0 0 1 1',
// '0 0 0 1 1 1 0 0 1 1',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ] // ans 13
// const input = [
// '1 1 1 1 1 1 1 1 1 1',
// '1 1 1 1 1 1 1 1 1 1',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '1 0 1 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '1 1 1 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ]// ans -1 
// const input = [
// '1 1 1 1 1 1 0 0 0 0',
// '1 1 1 1 1 1 0 0 0 0',
// '1 1 1 1 1 1 0 0 0 0',
// '1 1 1 1 1 1 0 0 0 0',
// '1 1 1 1 1 1 0 0 0 0',
// '1 1 1 1 1 1 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0'
// ] //ans 4
// const input = [
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '0 0 0 0 0 0 0 0 0 0',
//     '0 0 0 0 0 0 0 0 0 0'
// ] //ans 6

const fs = require('fs');
const input = fs.readFileSync('/dev/stdin').toString().trim().split('\n');
const board = Array.from({length:10},(_,i)=>input[i].split(' ').map(Number));

solution(board);
function solution(board){
    let min = Infinity;
    let paper = [0,5,5,5,5,5];
    const isValidPos = (y,x) => (y>=0 && x>=0 && y<10 && x<10);
    const check = (y,x,size) =>{
        for(let i=y; i<y+size; i++){
            for(let j=x; j<x+size; j++){
                if(!isValidPos(i,j) || !board[i][j]) return false;
            }
        }
        return true;
    }
    const papering = (y,x,size,state) =>{
        for(let i=y; i<y+size; i++){
            for(let j=x; j<x+size; j++){
                board[i][j] = state;
            }
        }
    }
    const dfs = (index,count) =>{
        const [y,x] = [Math.floor(index/10),index % 10];
        if(count >= min) return;
        if(index >=100){
            min = Math.min(count,min);
            return;
        }
        
        if(board[y][x]){
           for(let size=5; size>=1; size--){
               if(paper[size] && check(y,x,size)){
                   paper[size]--;
                   papering(y,x,size,0);
                   dfs(index+size,count+1);
                   paper[size]++;
                   papering(y,x,size,1);
               }
           }
        }
        else dfs(index+1,count);
        
    }
    dfs(0,0);
    return min === Infinity ? console.log(-1) : console.log(min);
}
