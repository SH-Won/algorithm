//const input = ['0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0']
// const input = [
//     '0 0 0 0 0 0 0 0 0 0',
// '0 1 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 1 0 0 0 0 0',
// '0 0 0 0 0 1 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ]
// const input = [
//     '0 0 0 0 0 0 0 0 0 0',
// '0 1 1 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 1 1 0 0 0 0',
// '0 0 0 0 1 1 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ]
// const input = [
//     '0 0 0 0 0 0 0 0 0 0',
// '0 1 1 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 1 1 0 0 0 0',
// '0 0 0 0 0 1 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ]
// const input = [
// '0 0 0 0 0 0 0 0 0 0',
// '0 1 1 0 0 0 0 0 0 0',
// '0 1 1 1 0 0 0 0 0 0',
// '0 0 1 1 1 1 1 0 0 0',
// '0 0 0 1 1 1 1 0 0 0',
// '0 0 0 0 1 1 1 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ]
// const input =[
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1'
// ]
// const input = [
// '0 0 0 0 0 0 0 0 0 0',
// '0 1 1 1 1 1 0 0 0 0',
// '0 1 1 1 1 1 0 0 0 0',
// '0 0 1 1 1 1 0 0 0 0',
// '0 0 1 1 1 1 0 0 0 0',
// '0 1 1 1 1 1 1 1 1 1',
// '0 1 1 1 0 1 1 1 1 1',
// '0 1 1 1 0 1 1 1 1 1',
// '0 0 0 0 0 1 1 1 1 1',
// '0 0 0 0 0 1 1 1 1 1',
// ]
const input = [
'0 0 0 0 0 0 0 0 0 0',
'1 1 1 1 1 0 0 0 0 0',
'1 1 1 1 1 0 1 1 1 1',
'1 1 1 1 1 0 1 1 1 1',
'1 1 1 1 1 0 1 1 1 1',
'1 1 1 1 1 0 1 1 1 1',
'0 0 0 0 0 0 0 0 0 0',
'0 1 1 1 0 1 1 0 0 0',
'0 1 1 1 0 1 1 0 0 0',
'0 1 1 1 0 0 0 0 0 1',
]
// const input = [
// '1 1 1 1 1 0 0 0 0 0',
// '0 0 0 0 0 1 1 0 1 1',
// '1 1 0 1 1 1 1 0 1 1',
// '1 1 0 1 1 0 0 1 1 1',
// '1 1 1 0 0 0 0 1 1 1',
// '1 1 1 1 1 1 0 1 1 1',
// '1 1 1 1 1 1 0 0 1 1',
// '0 0 0 1 1 1 0 0 1 1',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ] // ans 13
// const input = [
// '1 1 1 1 1 1 1 1 1 1',
// '1 1 1 1 1 1 1 1 1 1',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '1 0 1 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '1 1 1 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ]  // ans -1 
// const input = [
// '1 1 1 1 1 1 0 0 0 0',
// '1 1 1 1 1 1 0 0 0 0',
// '1 1 1 1 1 1 0 0 0 0',
// '1 1 1 1 1 1 0 0 0 0',
// '1 1 1 1 1 1 0 0 0 0',
// '1 1 1 1 1 1 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0'
// ] //ans 4
// const input = [
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '0 0 0 0 0 0 0 0 0 0',
//     '0 0 0 0 0 0 0 0 0 0'
// ] //ans 6
//const map = Array.from({length:10},(_,i)=>input[i].split(' ').map(Number))

const fs = require('fs');
const map = fs.readFileSync('/dev/stdin').toString().trim().split('\n').map(row => row.split(' ').map(Number));
const solution = (map) =>{
    let paper = [0,5,5,5,5,5];
    let min = Infinity;
    const isValidPos = (y,x) => (y>=0 && x>=0 && y<10 && x<10);
    const checkSize = (y,x,size) =>{
        for(let i=y; i<y+size; i++){
            for(let j=x; j<x+size; j++){
                if(!isValidPos(i,j) || !map[i][j]) return false;
            }
        }
        return true;
    }
    const papering = (y,x,size,paper) =>{
        for(let i=y; i<y+size; i++){
            for(let j=x; j<x+size; j++){
                map[i][j] = paper;
            }
        }
    }
    
    const attachPaper = (index,count) =>{
        if(count >= min) return;
        if(index >= 100){
           min = Math.min(min,count);
           return;
        }
        
            const [y,x] = [Math.floor(index/10), index%10];
            if(map[y][x]){
                for(let size=5; size>=1; size--){
                    if(!paper[size]) continue;
                    if(checkSize(y,x,size)){
                        paper[size]--;
                        papering(y,x,size,0);
                        attachPaper(index+size,count+1);
                        papering(y,x,size,1);
                        paper[size]++;
                    }
                }
            }
            else attachPaper(index+1,count);
        
    }
    attachPaper(0,0);
    return min === Infinity ? console.log(-1) : console.log(min);
}
solution(map);