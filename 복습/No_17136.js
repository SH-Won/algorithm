//const input = ['0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0','0 0 0 0 0 0 0 0 0 0']
// const input = [
//     '0 0 0 0 0 0 0 0 0 0',
// '0 1 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 1 0 0 0 0 0',
// '0 0 0 0 0 1 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ]
// const input = [
//     '0 0 0 0 0 0 0 0 0 0',
// '0 1 1 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 1 1 0 0 0 0',
// '0 0 0 0 1 1 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ]
// const input = [
//     '0 0 0 0 0 0 0 0 0 0',
// '0 1 1 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 1 1 0 0 0 0',
// '0 0 0 0 0 1 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ]
// const input = [
// '0 0 0 0 0 0 0 0 0 0',
// '0 1 1 0 0 0 0 0 0 0',
// '0 1 1 1 0 0 0 0 0 0',
// '0 0 1 1 1 1 1 0 0 0',
// '0 0 0 1 1 1 1 0 0 0',
// '0 0 0 0 1 1 1 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ]
// const input =[
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1',
//     '1 1 1 1 1 1 1 1 1 1'
// ]
// const input = [
// '0 0 0 0 0 0 0 0 0 0',
// '0 1 1 1 1 1 0 0 0 0',
// '0 1 1 1 1 1 0 0 0 0',
// '0 0 1 1 1 1 0 0 0 0',
// '0 0 1 1 1 1 0 0 0 0',
// '0 1 1 1 1 1 1 1 1 1',
// '0 1 1 1 0 1 1 1 1 1',
// '0 1 1 1 0 1 1 1 1 1',
// '0 0 0 0 0 1 1 1 1 1',
// '0 0 0 0 0 1 1 1 1 1',
// ]
// const input = [
// '0 0 0 0 0 0 0 0 0 0',
// '1 1 1 1 1 0 0 0 0 0',
// '1 1 1 1 1 0 1 1 1 1',
// '1 1 1 1 1 0 1 1 1 1',
// '1 1 1 1 1 0 1 1 1 1',
// '1 1 1 1 1 0 1 1 1 1',
// '0 0 0 0 0 0 0 0 0 0',
// '0 1 1 1 0 1 1 0 0 0',
// '0 1 1 1 0 1 1 0 0 0',
// '0 1 1 1 0 0 0 0 0 1',
// ]
// const input = [
// '1 1 1 1 1 0 0 0 0 0',
// '0 0 0 0 0 1 1 0 1 1',
// '1 1 0 1 1 1 1 0 1 1',
// '1 1 0 1 1 0 0 1 1 1',
// '1 1 1 0 0 0 0 1 1 1',
// '1 1 1 1 1 1 0 1 1 1',
// '1 1 1 1 1 1 0 0 1 1',
// '0 0 0 1 1 1 0 0 1 1',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ] // ans 13
// const input = [
// '1 1 1 1 1 1 1 1 1 1',
// '1 1 1 1 1 1 1 1 1 1',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '1 0 1 0 0 0 0 0 0 0',
// '0 0 1 0 0 0 0 0 0 0',
// '1 1 1 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// ]  // ans -1 
// const input = [
// '1 1 1 1 1 1 0 0 0 0',
// '1 1 1 1 1 1 0 0 0 0',
// '1 1 1 1 1 1 0 0 0 0',
// '1 1 1 1 1 1 0 0 0 0',
// '1 1 1 1 1 1 0 0 0 0',
// '1 1 1 1 1 1 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0'
// ] //ans 4
// const input = [
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '1 1 1 1 1 1 0 0 0 0',
//     '0 0 0 0 0 0 0 0 0 0',
//     '0 0 0 0 0 0 0 0 0 0'
// ] //ans 6

const fs = require('fs');
const input = fs.readFileSync('/dev/stdin').toString().trim().split('\n');
const paper = Array.from({length:10},(_,i)=>input[i].split(' '));

const solution = (paper) =>{
    let paperCount = [0,5,5,5,5,5];
    let min = Infinity;
    const isValidPos = (y,x) => (y>=0 && x>=0 && y<10 && x<10);

    const isPossible = (i,j,size)=>{
       for(let y=i; y<i+size; y++){
           for(let x=j; x<j+size; x++){
               if(!isValidPos(y,x) || paper[y][x] !=='1'){
                   return false
               }
           }
       }
       return true;
    }
    const papering = (i,j,size,state) =>{
        for(let y=i; y<i+size; y++){
            for(let x=j; x<j+size; x++){
                paper[y][x] = state;
            }
        }
    }
    const dfs = (index,count) =>{
        if(min <= count) return;
        if(index >= 100){
            min = Math.min(count,min);
            return;
        }
        const [y,x] = [Math.floor(index/10), index % 10];
        if(paper[y][x] === '1'){
            for(let size=5; size>=1; size--){
                if(paperCount[size] && isPossible(y,x,size)){
                    paperCount[size]--;
                    papering(y,x,size,'0');
                    dfs(index+size,count+1);
                    papering(y,x,size,'1');
                    paperCount[size]++;

                }
            }
        }
        else dfs(index+1,count);
    }
    dfs(0,0);
    return min ===Infinity ? console.log(-1) : console.log(min);
}
solution(paper);