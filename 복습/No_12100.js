//const input = ['3','2 2 2','4 4 4','8 8 8']; //ans 16
//const input = ['3','2 2 2','2 2 2','2 2 2'] //ans8
// const input =[
// '10',
// '16 16 8 32 32 0 0 8 8 8',
// '16 0 0 0 0 8 0 0 0 16',
// '0 0 0 0 0 0 0 0 0 2',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0'
// ] //ans64
// const input = [
// '5',
// '2 2 4 8 16',
// '0 0 0 0 0',
// '0 0 0 0 0',
// '0 0 0 0 0',
// '2 2 4 8 16',
// ]  //ans 64
//const input = ['2','16 0','0 0'] //ans 16
// const input = [
// '7',
// '2 2 2 2 2 2 2',
// '2 0 2 2 2 2 2',
// '2 0 2 2 2 2 2',
// '2 0 2 2 2 2 2',
// '2 2 2 0 2 2 2',
// '2 2 2 2 2 2 0',
// '2 2 2 2 2 2 0',
// ] //ans 32
// const input = [
// '10',
// '0 0 64 32 32 0 0 0 0 0',
// '0 32 32 64 0 0 0 0 0 0',
// '0 0 128 0 0 0 0 0 0 0',
// '64 64 128 0 0 0 0 0 0 0',
// '0 0 64 32 32 0 0 0 0 0',
// '0 32 32 64 0 0 0 0 0 0',
// '0 0 128 0 0 0 0 0 0 0',
// '64 64 128 0 0 0 0 0 0 0',
// '128 32 2 4 0 0 0 0 0 0',
// '0 0 128 0 0 0 0 0 0 0',
// ] //ans 1024
// const input = [
// '20',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// ] //ans 32768

const fs = require('fs');
const input = fs.readFileSync('/dev/stdin').toString().trim().split('\n');

const solution = () =>{
    const N = +input[0];
    let board = Array.from({length:N},(_,i)=>input[i+1].split(' ').map(Number));
    let order = Array(5);
    let maxBlock = 0;
    const [left,right,up,down] = [0,1,2,3];
    const getMaxBlock = (board) =>{
        let max = 0;
        board.forEach(row => max = Math.max(max,...row));
        return max;
    }
    const gameStart = (board) =>{
        
        for(let i=0; i<order.length; i++){
            const direction = order[i];
            switch(direction){
                case left : {
                    for(let y=0; y<N; y++){
                        let temp = board[y].filter(el => el);
                        board[y].fill(0);
                        let i=0 , x =0;
                        while(i < temp.length){
                            if(temp[i] === temp[i+1]){
                                board[y][x] = temp[i]*2;
                                x++;
                                i+=2;
                            }
                            else{
                                board[y][x] = temp[i];
                                x++;
                                i++;
                            }
                        }
                    }
                    break;
                }
                case right : {
                    for(let y=0; y<N; y++){
                        let temp = board[y].filter(el => el).reverse();
                        board[y].fill(0);
                        let i=0 , x = N-1;
                        while(i < temp.length){
                            if(temp[i] === temp[i+1]){
                                board[y][x] = temp[i]*2;
                                x--;
                                i+=2;
                            }
                            else{
                                board[y][x] = temp[i];
                                x--;
                                i++;
                            }
                        }
                    }
                    break;
                }
                case up : {
                    for(let x=0; x<N; x++){
                        let temp = board.map(row => row[x]).filter(el => el);
                        board.forEach(row => row[x] = 0);
                        let i=0 , y =0;
                        while(i < temp.length){
                            if(temp[i] === temp[i+1]){
                                board[y][x] = temp[i]*2;
                                y++;
                                i+=2;
                            }
                            else{
                                board[y][x] = temp[i];
                                y++;
                                i++;
                            }
                        }
                    }
                    break;
                }
                case down : {
                    for(let x=0; x<N; x++){
                        let temp = board.map(row => row[x]).filter(el => el).reverse();
                        board.forEach(row => row[x] = 0);
                        let i=0 , y =N-1;
                        while(i < temp.length){
                            if(temp[i] === temp[i+1]){
                                board[y][x] = temp[i]*2;
                                y--;
                                i+=2;
                            }
                            else{
                                board[y][x] = temp[i];
                                y--;
                                i++;
                            }
                        }
                    }
                    break;
                }
            }
           
        }
        return getMaxBlock(board);
    }
    
    const makeOrder = (count) =>{
        if(count === 5){
            const copyBoard = Array.from({length:N},(_,i)=>[...board[i]])
            const gameMaxBlock = gameStart(copyBoard);
            maxBlock = Math.max(maxBlock,gameMaxBlock);
            return;
        }
        for(let i=0; i<4; i++){
            order[count] = i;
            makeOrder(count+1);
        }
    }
    makeOrder(0);
    console.log(maxBlock);
}
solution();