//  const input = ['3','2 2 2','4 4 4','8 8 8']; //ans 16
// const input = ['3','2 2 2','2 2 2','2 2 2'] //ans8
// const input =[
// '10',
// '16 16 8 32 32 0 0 8 8 8',
// '16 0 0 0 0 8 0 0 0 16',
// '0 0 0 0 0 0 0 0 0 2',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0',
// '0 0 0 0 0 0 0 0 0 0'
// ] //ans64
// const input = [
// '5',
// '2 2 4 8 16',
// '0 0 0 0 0',
// '0 0 0 0 0',
// '0 0 0 0 0',
// '2 2 4 8 16',
// ]  //ans 64
// const input = ['2','16 0','0 0'] //ans 16
// const input = [
// '7',
// '2 2 2 2 2 2 2',
// '2 0 2 2 2 2 2',
// '2 0 2 2 2 2 2',
// '2 0 2 2 2 2 2',
// '2 2 2 0 2 2 2',
// '2 2 2 2 2 2 0',
// '2 2 2 2 2 2 0',
// ] //ans 32
// const input = [
// '10',
// '0 0 64 32 32 0 0 0 0 0',
// '0 32 32 64 0 0 0 0 0 0',
// '0 0 128 0 0 0 0 0 0 0',
// '64 64 128 0 0 0 0 0 0 0',
// '0 0 64 32 32 0 0 0 0 0',
// '0 32 32 64 0 0 0 0 0 0',
// '0 0 128 0 0 0 0 0 0 0',
// '64 64 128 0 0 0 0 0 0 0',
// '128 32 2 4 0 0 0 0 0 0',
// '0 0 128 0 0 0 0 0 0 0',
// ] //ans 1024
// const input = [
// '20',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// '1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024',
// ] //ans 32768
//const fs = require('fs');
//const input = fs.readFileSync('/dev/stdin').toString().trim().split('\n');
const [LEFT,RIGHT,UP,DOWN] = [0,1,2,3];

const moveBlock = (map,dir) =>{
    for(let i=0; i<dir.length; i++){
        const d = dir[i];
        if(d === LEFT){
            for(let y=0; y<map.length; y++){
                let blocks = map[y].filter(el => el);
                map[y].fill(0);
                let index = 0 , x = 0;
                while(index < blocks.length){
                    if(blocks[index] === blocks[index+1]){
                        map[y][x] = blocks[index] * 2 , index+=2;
                    }
                    else{
                        map[y][x] = blocks[index], index+=1 ;
                    }
                    x++;
                }
            }
        }
        else if(d === RIGHT){
            for(let y=0; y<map.length; y++){
                let blocks = map[y].filter(el => el).reverse();
                map[y].fill(0);
                let index = 0 , x = map[y].length-1;
                while(index < blocks.length){
                    if(blocks[index] === blocks[index+1]){
                       map[y][x] = blocks[index] * 2,  index+=2 ;
                    }
                    else{
                       map[y][x] = blocks[index], index+=1 ;
                    }
                    x--;
                }
            }
        }
        else if(d === UP){
            for(let x=0; x<map[0].length; x++){
                let blocks = map.map(row => row[x]).filter(el => el);
                let index = 0 , y = 0 ;
                while(index <blocks.length){
                    if(blocks[index] === blocks[index+1]){
                        map[y][x] = blocks[index] * 2, index+=2;
                    }
                    else{
                        map[y][x] = blocks[index], index+=1;
                    }
                    y++;
                }
                while(y < map.length){
                    map[y][x] = 0;
                    y++;
                }
            }
        }
        else if(d === DOWN){
            for(let x=0; x<map[0].length; x++){
                let blocks = map.map(row => row[x]).filter(el => el).reverse();
                let index = 0 , y = map.length-1 ;
                while(index <blocks.length){
                    if(blocks[index] === blocks[index+1]){
                         map[y][x] = blocks[index] * 2, index+=2;
                    }
                    else{
                         map[y][x] = blocks[index], index+=1;
                    }
                    y--;
                }
                while(y >= 0){
                    map[y][x] = 0;
                    y--;
                }
            }
        }
    }
    return Math.max(...map.flat());
}
const solution = (input) =>{
    const N = +input[0];
    let map = Array.from({length:N},(_,i)=>input[i+1].split(' ').map(Number));
    let dir = Array(5);
    let max = 0;
    const makeDirection = (count) =>{
        if(count === dir.length){
            const copyMap = map.map(row => [...row]);
            const maxBlock = moveBlock(copyMap,dir);
            max = Math.max(maxBlock,max);
            return;
        }
        for(let i=0; i<4; i++){
            dir[count] = i;
            makeDirection(count+1);
        }
    }
    makeDirection(0);
    console.log(max);
}
solution(input);